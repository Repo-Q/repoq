{
  "verification": {
    "spdx": {
      "trs_name": "SPDX",
      "timestamp": 1761052428.335422,
      "test_terms_count": 62,
      "idempotence": {
        "passed": true,
        "time_ms": 0.7882118225097656
      },
      "determinism": {
        "passed": true,
        "time_ms": 0.09179115295410156
      },
      "confluence": {
        "passed": false,
        "time_ms": 0.018835067749023438
      },
      "termination": {
        "passed": true,
        "time_ms": 0.13113021850585938
      },
      "soundness": {
        "passed": true,
        "time_ms": 0.03600120544433594
      },
      "verification_details": {
        "idempotence_violations": [],
        "determinism_violations": [],
        "critical_pairs": 3,
        "non_joinable_pairs": [
          "CriticalPair(term='mit', left_result='mit', right_result='MIT', rule1='case_normalization', rule2='identifier_lookup', joinable=False, join_steps=None)",
          "CriticalPair(term='GPL-3.0+', left_result='GPL-3.0+', right_result='GPL-3.0-or-later', rule1='plus_expansion', rule2='identifier_normalization', joinable=False, join_steps=None)"
        ],
        "termination_violations": []
      }
    },
    "semver": {
      "trs_name": "SemVer",
      "timestamp": 1761052428.3365228,
      "test_terms_count": 100,
      "idempotence": {
        "passed": true,
        "time_ms": 1.2650489807128906
      },
      "determinism": {
        "passed": true,
        "time_ms": 0.057220458984375
      },
      "confluence": {
        "passed": false,
        "time_ms": 0.07987022399902344
      },
      "termination": {
        "passed": true,
        "time_ms": 0.15926361083984375
      },
      "soundness": {
        "passed": true,
        "time_ms": 0.015974044799804688
      },
      "verification_details": {
        "idempotence_violations": [],
        "determinism_violations": [],
        "critical_pairs": 3,
        "non_joinable_pairs": [
          "CriticalPair(term='1.2.3-alpha', left_result='1.2.3-alpha', right_result='1.2.3-ALPHA', rule1='prerelease_case', rule2='case_normalization', joinable=False, join_steps=None)"
        ],
        "termination_violations": []
      }
    },
    "filters": {
      "trs_name": "Filters",
      "timestamp": 1761052428.3381877,
      "test_terms_count": 30,
      "idempotence": {
        "passed": true,
        "time_ms": 2.1102428436279297
      },
      "determinism": {
        "passed": true,
        "time_ms": 3.5142898559570312
      },
      "confluence": {
        "passed": true,
        "time_ms": 15.618562698364258
      },
      "termination": {
        "passed": true,
        "time_ms": 1.5425682067871094
      },
      "soundness": {
        "passed": true,
        "time_ms": 1.8324851989746094
      },
      "verification_details": {
        "idempotence_violations": [],
        "determinism_violations": [],
        "critical_pairs": 3,
        "non_joinable_pairs": [],
        "termination_violations": []
      }
    },
    "metrics": {
      "trs_name": "Metrics",
      "timestamp": 1761052428.3628483,
      "test_terms_count": 42,
      "idempotence": {
        "passed": false,
        "time_ms": 233.17408561706543
      },
      "determinism": {
        "passed": true,
        "time_ms": 346.5607166290283
      },
      "confluence": {
        "passed": true,
        "time_ms": 28.62405776977539
      },
      "termination": {
        "passed": true,
        "time_ms": 116.47748947143555
      },
      "soundness": {
        "passed": false,
        "time_ms": 118.41845512390137
      },
      "verification_details": {
        "idempotence_violations": [
          {
            "term": "lines",
            "error": "Invalid metric expression: var:lines"
          },
          {
            "term": "complexity",
            "error": "Invalid metric expression: var:complexity"
          },
          {
            "term": "coverage",
            "error": "Invalid metric expression: var:coverage"
          },
          {
            "term": "bugs",
            "error": "Invalid metric expression: var:bugs"
          },
          {
            "term": "debt",
            "error": "Invalid metric expression: var:debt"
          },
          {
            "term": "2 * lines",
            "error": "Invalid metric expression: *(2,var:lines)"
          },
          {
            "term": "lines + 1",
            "error": "Invalid metric expression: +(1,var:lines)"
          },
          {
            "term": "lines / 100",
            "error": "Invalid metric expression: *(0.01,var:lines)"
          },
          {
            "term": "lines - baseline",
            "error": "Invalid metric expression: +(var:lines,*(-1,var:baseline))"
          },
          {
            "term": "2 * complexity",
            "error": "Invalid metric expression: *(2,var:complexity)"
          },
          {
            "term": "complexity + 1",
            "error": "Invalid metric expression: +(1,var:complexity)"
          },
          {
            "term": "complexity / 100",
            "error": "Invalid metric expression: *(0.01,var:complexity)"
          },
          {
            "term": "complexity - baseline",
            "error": "Invalid metric expression: +(var:complexity,*(-1,var:baseline))"
          },
          {
            "term": "2 * coverage",
            "error": "Invalid metric expression: *(2,var:coverage)"
          },
          {
            "term": "coverage + 1",
            "error": "Invalid metric expression: +(1,var:coverage)"
          },
          {
            "term": "coverage / 100",
            "error": "Invalid metric expression: *(0.01,var:coverage)"
          },
          {
            "term": "coverage - baseline",
            "error": "Invalid metric expression: +(var:coverage,*(-1,var:baseline))"
          },
          {
            "term": "sum(lines)",
            "error": "Invalid metric expression: sum(var:lines)"
          },
          {
            "term": "sum(lines, complexity)",
            "error": "Invalid metric expression: sum(var:complexity,var:lines)"
          },
          {
            "term": "sum(coverage, bugs, debt)",
            "error": "Invalid metric expression: sum(var:bugs,var:coverage,var:debt)"
          },
          {
            "term": "avg(lines)",
            "error": "Invalid metric expression: avg(var:lines)"
          },
          {
            "term": "avg(lines, complexity)",
            "error": "Invalid metric expression: avg(var:lines,var:complexity)"
          },
          {
            "term": "avg(coverage, bugs, debt)",
            "error": "Invalid metric expression: avg(var:coverage,var:bugs,var:debt)"
          },
          {
            "term": "max(lines)",
            "error": "Invalid metric expression: max(var:lines)"
          },
          {
            "term": "max(lines, complexity)",
            "error": "Invalid metric expression: max(var:complexity,var:lines)"
          },
          {
            "term": "max(coverage, bugs, debt)",
            "error": "Invalid metric expression: max(var:bugs,var:coverage,var:debt)"
          },
          {
            "term": "min(lines)",
            "error": "Invalid metric expression: min(var:lines)"
          },
          {
            "term": "min(lines, complexity)",
            "error": "Invalid metric expression: min(var:complexity,var:lines)"
          },
          {
            "term": "min(coverage, bugs, debt)",
            "error": "Invalid metric expression: min(var:bugs,var:coverage,var:debt)"
          },
          {
            "term": "count(lines)",
            "error": "Invalid metric expression: count(var:lines)"
          },
          {
            "term": "count(lines, complexity)",
            "error": "Invalid metric expression: count(var:lines,var:complexity)"
          },
          {
            "term": "count(coverage, bugs, debt)",
            "error": "Invalid metric expression: count(var:coverage,var:bugs,var:debt)"
          },
          {
            "term": "2 * lines + 3 * complexity",
            "error": "Invalid metric expression: +(*(2,var:lines),*(3,var:complexity))"
          },
          {
            "term": "(lines + complexity) * weight",
            "error": "Invalid metric expression: +(*(var:complexity,var:weight),*(var:lines,var:weight))"
          },
          {
            "term": "sum(lines) / count(files)",
            "error": "Invalid metric expression: *(^(count(var:files),-1),sum(var:lines))"
          },
          {
            "term": "avg(complexity) * 0.6 + avg(coverage) * 0.4",
            "error": "Invalid metric expression: +(*(0.4,avg(var:coverage)),*(0.6,avg(var:complexity)))"
          },
          {
            "term": "max(bugs, 0) + min(debt, 1000)",
            "error": "Invalid metric expression: +(max(0,var:bugs),min(1000,var:debt))"
          },
          {
            "term": "lines * (1 + complexity / 100)",
            "error": "Invalid metric expression: +(var:lines,*(0.01,var:complexity,var:lines))"
          },
          {
            "term": "((a + b) * 2 + (a + b) * 3) / (c + d + c)",
            "error": "Invalid metric expression: *(+(*(5,var:a),*(5,var:b)),^(+(var:d,*(2,var:c)),-1))"
          },
          {
            "term": "complexity:0.6",
            "error": "Invalid metric expression: *(0.6,var:complexity)"
          },
          {
            "term": "lines:0.3 + complexity:0.7",
            "error": "Invalid metric expression: +(*(0.3,var:lines),*(0.7,var:complexity))"
          },
          {
            "term": "sum(lines:0.5, complexity:0.5)",
            "error": "Invalid metric expression: sum(*(0.5,var:lines),*(0.5,var:complexity))"
          }
        ],
        "determinism_violations": [],
        "critical_pairs": 5,
        "non_joinable_pairs": [],
        "termination_violations": []
      }
    },
    "rdf": {
      "trs_name": "RDF",
      "timestamp": 1761052429.2062294,
      "test_terms_count": 27,
      "idempotence": {
        "passed": true,
        "time_ms": 0.049114227294921875
      },
      "determinism": {
        "passed": true,
        "time_ms": 0.05602836608886719
      },
      "confluence": {
        "passed": false,
        "time_ms": 0.024557113647460938
      },
      "termination": {
        "passed": true,
        "time_ms": 0.06747245788574219
      },
      "soundness": {
        "passed": true,
        "time_ms": 0.030517578125
      },
      "verification_details": {
        "idempotence_violations": [],
        "determinism_violations": [],
        "critical_pairs": 2,
        "non_joinable_pairs": [
          "CriticalPair(term='{\"@context\": \"http://schema.org/\", \"@type\": \"Project\", \"name\": \"test\"}', left_result='{\"@context\": \"http://schema.org/\", \"@type\": \"Project\", \"name\": \"test\"}', right_result='{\\n  \"@context\": \"http://schema.org/\",\\n  \"@type\": \"Project\",\\n  \"name\": \"test\"\\n}', rule1='compact_json', rule2='pretty_json', joinable=False, join_steps=None)"
        ],
        "termination_violations": []
      }
    },
    "_summary": {
      "total_systems": 5,
      "all_passed": false,
      "verification_time": 870.743989944458
    },
    "_metadata": {
      "verification_level": "basic",
      "total_time_seconds": 0.8710789680480957,
      "timestamp": 1761052429.206479,
      "runner_version": "1.0.0"
    }
  }
}