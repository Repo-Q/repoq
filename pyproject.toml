[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "repoq"
version = "2.0.0"
description = "CLI for repository quality with PROV-O/OSLC/SPDX/FOAF/SDO ontology output + reports/graphs/TTL/validation."
readme = "README.md"
requires-python = ">=3.9"
authors = [{name = "Your Name"}]
license = "MIT"
keywords = ["git", "quality", "analytics", "json-ld", "ontology", "prov", "oslc", "spdx", "shacl"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Version Control :: Git"
]
dependencies = [
  "typer>=0.12",
  "rich>=13.7",
  "jinja2>=3.1",
  "pyyaml>=6.0.2",
]

[project.optional-dependencies]
full = [
  "pydriller>=2.7",
  "lizard>=1.17",
  "radon>=6.0",
  "graphviz>=0.20",
  "rdflib>=7.0",
  "orjson>=3.10",
  "pyshacl>=0.23.0",
  "tree-sitter>=0.20",             # AST parsing for filters_trs
  "tree-sitter-python>=0.20",      # Python grammar for tree-sitter
]
dev = [
  "pytest>=8.0",
  "pytest-cov>=5.0",
  "pytest-asyncio>=0.21",
  "pytest-mock>=3.12",
  "ruff>=0.6",
  "black>=24.3",
  "mypy>=1.10",
  "types-PyYAML"
]
docs = [
  "mkdocs>=1.5",
  "mkdocs-material>=9.4",
  "mkdocs-autorefs>=0.5",
  "mkdocs-mermaid2-plugin>=1.1",
  "mkdocstrings[python]>=0.24",
  "pymdown-extensions>=10.4",
  "mike>=2.0"  # Documentation versioning
]

[project.scripts]
repoq = "repoq.cli:app"

[dependency-groups]
dev = [
  "pytest>=8.0",
  "pytest-cov>=5.0",
  "pytest-asyncio>=0.21",
  "pytest-mock>=3.12",
  "pytest-xdist>=3.5",  # Parallel test execution
  "pytest-timeout>=2.3",  # Test timeouts
  "ruff>=0.6",
  "black>=24.3",
  "mypy>=1.10",
  "types-PyYAML",
  "hypothesis>=6.0",  # Property-based testing
  "sympy>=1.12",      # Symbolic math for TRS normalization
  "pre-commit>=3.0",  # Git hooks framework
  "bandit[toml]>=1.7",  # Security linting
]
docs = [
  "mkdocs>=1.5",
  "mkdocs-material>=9.4",
  "mkdocs-autorefs>=0.5",
  "mkdocs-mermaid2-plugin>=1.1",
  "mkdocstrings[python]>=0.24",
  "pymdown-extensions>=10.4",
  "mike>=2.0"  # Documentation versioning
]

[tool.setuptools]
packages = [
  "repoq",
  "repoq.analyzers",
  "repoq.core",
  "repoq.config",
  "repoq.normalize",
  "repoq.ontologies",
  "repoq.reporting",
  "repoq.shapes"
]

[tool.setuptools.package-data]
repoq = ["ontologies/*.jsonld", "shapes/*.ttl"]

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501", "E701"]  # Line too long (formatter), compact if (idiomatic Python)

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E501", "E701", "E702", "F841"]  # Allow long lines, compact statements, and unused vars in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true  # Allow missing stubs for pydriller, radon, graphviz
check_untyped_defs = false
disable_error_code = ["assignment", "arg-type", "attr-defined", "var-annotated", "union-attr", "no-redef"]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "tmp", "site"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection (safe in our context)

[tool.bandit.assert_used]
skips = ["*/tests/*"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, external dependencies)",
    "e2e: End-to-end tests (full workflow)",
    "smoke: Smoke tests (critical functionality)",
    "slow: Slow tests (skip in quick runs)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["repoq"]
omit = [
    "*/tests/*",
    "*/repoq/ai/baml_client/*",  # Generated code
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

