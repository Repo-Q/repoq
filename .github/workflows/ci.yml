name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Ruff check
        run: ruff check .
      
      - name: Black check
        run: black --check .
      
      - name: MyPy type check
        run: mypy repoq/
        continue-on-error: true  # Phase 1: warnings only

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # для git history анализа
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[full,dev]"
      
      - name: Run tests with coverage
        run: |
          pytest --cov=repoq --cov-report=xml --cov-report=term-missing -v
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  self-analyze:
    name: Self-Hosting Quality Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install -e ".[full]"
      
      - name: Run self-analysis
        run: |
          mkdir -p artifacts
          repoq full . \
            -o artifacts/repoq_self.jsonld \
            --md artifacts/repoq_self.md \
            --ttl artifacts/repoq_self.ttl \
            --graphs artifacts/graphs \
            --validate-shapes || echo "SHACL validation disabled (Phase 0)"
      
      - name: Assert quality gates (Phase 1 target)
        run: |
          python -c "
          import json, sys
          data = json.load(open('artifacts/repoq_self.jsonld'))
          
          # Проверяем наличие базовых метрик
          assert data.get('modules'), 'No modules found'
          assert len(data.get('files', [])) > 0, 'No files analyzed'
          assert len(data.get('contributors', [])) > 0, 'No contributors'
          
          # Phase 1 target: < 5 high-severity issues
          issues_high = [i for i in data.get('issues', []) 
                         if 'Critical' in str(i.get('severity', {}).get('@id', ''))]
          
          if len(issues_high) > 5:
              print(f'WARNING: {len(issues_high)} high-severity issues (target: <5)')
              # Phase 0: warning only, не блокируем
          else:
              print(f'✅ Quality gates passed: {len(issues_high)} high-severity issues')
          " || echo "Quality check failed (expected in Phase 0)"
      
      - name: Upload self-analysis artifacts
        uses: actions/upload-artifact@v3
        with:
          name: self-analysis-results
          path: artifacts/
          retention-days: 90

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Bandit security scan
        run: bandit -r repoq/ -f json -o bandit_report.json || true
      
      - name: Safety check dependencies
        run: safety check --json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit_report.json
