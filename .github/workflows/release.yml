name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v2.0.0, v2.1.0-beta.1)

permissions:
  contents: write  # For creating GitHub releases
  id-token: write  # For PyPI trusted publishing

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: get-version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Release version: $TAG"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected: X.Y.Z or X.Y.Z-suffix (e.g., 2.0.0, 2.1.0-beta.1)"
            exit 1
          fi
          echo "✅ Valid version format: $VERSION"
      
      - name: Check version matches pyproject.toml
        run: |
          TAG_VERSION="${{ steps.get-version.outputs.version }}"
          TOML_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          
          echo "Tag version: $TAG_VERSION"
          echo "pyproject.toml version: $TOML_VERSION"
          
          if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
            echo "❌ Version mismatch: tag=$TAG_VERSION, pyproject.toml=$TOML_VERSION"
            echo "Update pyproject.toml version before tagging"
            exit 1
          fi
          echo "✅ Version matches: $TAG_VERSION"

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-tag
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install --upgrade pip
          pip install -e ".[full,dev]"
      
      - name: Run tests
        run: |
          pytest --cov=repoq --cov-report=xml --cov-report=term-missing -v
      
      - name: Verify coverage threshold
        if: matrix.python-version == '3.11'
        run: |
          python -c "
          import json
          with open('coverage.json') as f:
              coverage = json.load(f)['totals']['percent_covered']
          threshold = 60.0
          assert coverage >= threshold, f'Coverage {coverage:.1f}% below threshold {threshold}%'
          print(f'✅ Coverage {coverage:.1f}% meets release threshold {threshold}%')
          "

  build-wheel:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build tools
        run: |
          pip install --upgrade pip
          pip install build twine
      
      - name: Build wheel and sdist
        run: |
          python -m build
      
      - name: Check distribution packages
        run: |
          twine check dist/*
          ls -lh dist/
      
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU (multi-arch support)
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            kirill0440/repoq
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheel, docker-build]
    environment:
      name: pypi
      url: https://pypi.org/project/repoq/
    
    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Uses OIDC trusted publishing (no token needed)
          # Configure at https://pypi.org/manage/account/publishing/
          verbose: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
      
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 🎉 RepoQ v$VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "### Changes since $PREV_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "### Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "First stable release of RepoQ." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Installation" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "pip install repoq==$VERSION" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Docker" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "docker pull kirill0440/repoq:$VERSION" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          cat CHANGELOG.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: dist/*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: success()
    
    steps:
      - name: Summary
        run: |
          echo "# 🚀 Release Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Published to:" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [PyPI](https://pypi.org/project/repoq/${{ needs.validate-tag.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 [Docker Hub](https://hub.docker.com/r/kirill0440/repoq/tags)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-tag.outputs.version }})" >> $GITHUB_STEP_SUMMARY
