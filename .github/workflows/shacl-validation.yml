name: SHACL Semantic Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Daily validation at 03:00 UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: '3.11'
  SHACL_REPORT_DIR: 'shacl-reports'

jobs:
  shacl-validate:
    name: RDF/SHACL Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[full,dev]"
    
    - name: Run RepoQ analysis with RDF export
      id: repoq_analysis
      run: |
        echo "::group::RepoQ Analysis"
        
        # Run full analysis with RDF export
        python -m repoq analyze . \
          --output repoq_analysis.jsonld \
          --format jsonld \
          --ttl-output repoq_analysis.ttl \
          --context repoq/ontologies/context_ext.jsonld \
          --enrich-meta
        
        echo "✅ Analysis complete, RDF exported to repoq_analysis.ttl"
        echo "::endgroup::"
      continue-on-error: false
    
    - name: Validate against SHACL shapes
      id: shacl_validation
      run: |
        echo "::group::SHACL Validation"
        
        # Create report directory
        mkdir -p "${{ env.SHACL_REPORT_DIR }}"
        
        # Run SHACL validation programmatically
        python -c "
        import sys
        import json
        from pathlib import Path
        from repoq.core.model import Project
        from repoq.core.rdf_export import validate_shapes
        
        # Load project from JSON-LD
        import orjson
        with open('repoq_analysis.jsonld', 'rb') as f:
            data = orjson.loads(f.read())
        
        # Create minimal project for validation (actual RDF is already exported)
        project = Project(
            id='repo:repoq',
            name='repoq',
            path='.',
            files={}
        )
        
        # Validate
        result = validate_shapes(
            project,
            shapes_dir='repoq/shapes',
            context_file='repoq/ontologies/context_ext.jsonld',
            enrich_meta=True
        )
        
        # Write report
        report_path = Path('${{ env.SHACL_REPORT_DIR }}/validation-report.json')
        report_path.write_text(json.dumps(result, indent=2))
        
        # Print summary
        print('SHACL Validation Results')
        print('=' * 60)
        print(f'Conforms: {result[\"conforms\"]}')
        print(f'Violations: {len(result[\"violations\"])}')
        
        if result['violations']:
            print()
            print('Critical Violations:')
            critical = [v for v in result['violations'] if v.get('severity') == 'Violation']
            for v in critical:
                print(f'  - {v[\"focusNode\"]}: {v[\"message\"]}')
            
            if critical:
                print()
                print('❌ FAIL: SHACL validation found critical violations')
                sys.exit(1)
        
        print()
        print('✅ PASS: All SHACL constraints satisfied')
        "
        
        echo "::endgroup::"
    
    - name: Upload SHACL report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: shacl-validation-report
        path: ${{ env.SHACL_REPORT_DIR }}/
        retention-days: 30
    
    - name: Upload RDF artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: rdf-exports
        path: |
          repoq_analysis.jsonld
          repoq_analysis.ttl
        retention-days: 7
    
    - name: Comment PR with validation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = '${{ env.SHACL_REPORT_DIR }}/validation-report.json';
          
          if (!fs.existsSync(reportPath)) {
            console.log('No validation report found');
            return;
          }
          
          const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
          const conforms = report.conforms;
          const violations = report.violations || [];
          const critical = violations.filter(v => v.severity === 'Violation');
          
          const emoji = conforms ? '✅' : '❌';
          const status = conforms ? 'PASSED' : 'FAILED';
          
          let body = `## ${emoji} SHACL Semantic Validation ${status}\n\n`;
          body += `- **Conforms:** ${conforms ? 'Yes' : 'No'}\n`;
          body += `- **Total violations:** ${violations.length}\n`;
          body += `- **Critical violations:** ${critical.length}\n\n`;
          
          if (critical.length > 0) {
            body += `### Critical Violations\n\n`;
            for (const v of critical.slice(0, 5)) {
              body += `- **${v.focusNode}:** ${v.message}\n`;
            }
            if (critical.length > 5) {
              body += `\n_... and ${critical.length - 5} more violations_\n`;
            }
          }
          
          body += `\n📊 [View full report in artifacts](${context.payload.pull_request.html_url}/checks)`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  ontology-validation:
    name: Ontology Self-Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[full,dev]"
    
    - name: Validate ontology files
      run: |
        echo "::group::Ontology Validation"
        
        # Run ontology validation tests
        python -m pytest tests/shacl/ -v -k "ontology" --tb=short
        
        echo "✅ All ontologies are valid RDF/Turtle"
        echo "::endgroup::"
    
    - name: Check ontology consistency
      run: |
        echo "::group::Consistency Check"
        
        # Validate all ontologies can be parsed
        python -c "
        from rdflib import Graph
        from pathlib import Path
        
        ontologies = Path('repoq/ontologies').glob('*.ttl')
        
        for ont_path in ontologies:
            print(f'Validating {ont_path.name}...')
            g = Graph()
            g.parse(ont_path, format='turtle')
            print(f'  ✅ {len(g)} triples')
        
        print()
        print('✅ All ontologies are syntactically valid')
        "
        
        echo "::endgroup::"

  meta-loop-check:
    name: Meta-Loop Self-Application
    runs-on: ubuntu-latest
    needs: [shacl-validate, ontology-validation]
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[full,dev]"
    
    - name: Run meta-loop self-inspection
      run: |
        echo "::group::Meta-Loop Self-Inspection"
        
        # Run repoq meta CLI on itself
        python -m repoq meta meta-inspect . --output meta-self-analysis.json
        
        # Check that we don't detect self-reference violations
        python -c "
        import json
        with open('meta-self-analysis.json') as f:
            data = json.load(f)
        
        assert data['stratification_level'] == 0, 'Expected stratification level 0'
        assert data['read_only_mode'] is True, 'Expected read-only mode'
        assert data['self_reference_detected'] is False, 'Unexpected self-reference'
        
        print('✅ Meta-loop safety checks passed')
        print(f'   Stratification level: {data[\"stratification_level\"]}')
        print(f'   Read-only mode: {data[\"read_only_mode\"]}')
        print(f'   Self-reference detected: {data[\"self_reference_detected\"]}')
        "
        
        echo "::endgroup::"
    
    - name: Upload meta-loop report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: meta-loop-report
        path: meta-self-analysis.json
        retention-days: 30
