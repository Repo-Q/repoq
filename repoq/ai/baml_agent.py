"""
BAML AI Agent Client for RepoQ
Phase 5.8: AI-Assisted TRS/Ontology Validation

This module provides integration with BAML-generated AI functions
for automated validation and analysis.

Architecture:
- 4-phase rollout: experimental → advisory → active → default-on
- Fallback chain: GPT-4 → Claude → GPT-4-mini
- Confidence scoring for human review prioritization
"""

import logging
import os
from dataclasses import dataclass, field
from enum import Enum
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# PHASE CONFIGURATION
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


class AgentPhase(Enum):
    """4-phase rollout strategy for BAML agent"""

    DISABLED = "disabled"  # Feature flag off
    EXPERIMENTAL = "experimental"  # Internal testing only
    ADVISORY = "advisory"  # Suggestions, no blocking
    ACTIVE = "active"  # Can block with human review
    DEFAULT_ON = "default_on"  # Default behavior, opt-out


@dataclass
class AgentConfig:
    """Configuration for BAML AI Agent"""

    phase: AgentPhase = AgentPhase.DISABLED
    confidence_threshold: float = 0.7  # Min confidence for auto-action
    require_human_review: bool = True
    enable_fallback: bool = True
    timeout_seconds: int = 30

    # API keys (from environment)
    openai_api_key: Optional[str] = field(default_factory=lambda: os.getenv("OPENAI_API_KEY"))
    anthropic_api_key: Optional[str] = field(default_factory=lambda: os.getenv("ANTHROPIC_API_KEY"))

    @property
    def is_enabled(self) -> bool:
        """Check if agent is enabled (not DISABLED)"""
        return self.phase != AgentPhase.DISABLED

    @property
    def can_block(self) -> bool:
        """Check if agent can block actions (ACTIVE or DEFAULT_ON)"""
        return self.phase in (AgentPhase.ACTIVE, AgentPhase.DEFAULT_ON)

    def validate(self) -> List[str]:
        """Validate configuration, return list of errors"""
        errors = []

        if self.is_enabled:
            if not self.openai_api_key and not self.anthropic_api_key:
                errors.append(
                    "BAML agent enabled but no API keys found. "
                    "Set OPENAI_API_KEY or ANTHROPIC_API_KEY environment variable."
                )

            if not (0.0 <= self.confidence_threshold <= 1.0):
                errors.append(
                    f"Invalid confidence_threshold: {self.confidence_threshold}. "
                    "Must be between 0.0 and 1.0."
                )

            if self.timeout_seconds <= 0:
                errors.append(f"Invalid timeout_seconds: {self.timeout_seconds}. Must be positive.")

        return errors


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# BAML CLIENT WRAPPER
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


class BAMLAgent:
    """
    Wrapper for BAML-generated client with RepoQ-specific logic.

    Phase 5.8 Implementation:
    - Phase 1 (EXPERIMENTAL): Internal testing, logging only
    - Phase 2 (ADVISORY): Suggestions in comments, no blocking
    - Phase 3 (ACTIVE): Can block with human review required
    - Phase 4 (DEFAULT_ON): Default behavior, opt-out available
    """

    def __init__(self, config: Optional[AgentConfig] = None):
        self.config = config or AgentConfig()

        # Validate configuration
        errors = self.config.validate()
        if errors:
            raise ValueError(f"Invalid AgentConfig: {'; '.join(errors)}")

        # Lazy-load BAML client (only if enabled)
        self._baml_client = None

        if self.config.is_enabled:
            self._initialize_baml_client()

    def _initialize_baml_client(self):
        """Lazy initialization of BAML client"""
        try:
            # Import BAML-generated client
            # This will be generated by: baml-cli generate
            from baml_client import b  # type: ignore

            self._baml_client = b
            logger.info(f"BAML agent initialized (phase={self.config.phase.value})")
        except ImportError as e:
            logger.warning(
                f"BAML client not found. Run 'baml-cli generate' first. "
                f"Error: {e}. Agent will operate in DISABLED mode."
            )
            # Graceful degradation: disable agent
            self.config.phase = AgentPhase.DISABLED

    @property
    def is_available(self) -> bool:
        """Check if BAML client is available"""
        return self._baml_client is not None and self.config.is_enabled

    async def validate_trs_rule(
        self, rule_lhs: str, rule_rhs: str, existing_rules: List[str], context: str = ""
    ) -> Dict[str, Any]:
        """
        Validate a TRS rule using AI analysis.

        Returns:
            Dict with keys:
            - result: TRSValidationResult (if successful)
            - phase: Current agent phase
            - should_block: bool (if rule should be rejected)
            - human_review_required: bool
            - error: str (if failed)
        """
        if not self.is_available:
            return {
                "phase": self.config.phase.value,
                "should_block": False,
                "human_review_required": False,
                "error": "BAML agent not available",
            }

        try:
            # Call BAML function
            result = await self._baml_client.ValidateTRSRule(
                rule_lhs=rule_lhs, rule_rhs=rule_rhs, existing_rules=existing_rules, context=context
            )

            # Interpret result based on phase
            should_block = False
            human_review_required = False

            if self.config.phase == AgentPhase.EXPERIMENTAL:
                # Experimental: log only
                logger.info(
                    f"[EXPERIMENTAL] TRS validation: "
                    f"confluence={result.confluence_status}, "
                    f"termination={result.termination_status}, "
                    f"confidence={result.confidence}"
                )

            elif self.config.phase == AgentPhase.ADVISORY:
                # Advisory: suggest but don't block
                if result.confidence >= self.config.confidence_threshold:
                    if result.confluence_status == "NON_CONFLUENT":
                        logger.warning(
                            f"[ADVISORY] Potential non-confluence detected: {result.issues}"
                        )

            elif self.config.phase in (AgentPhase.ACTIVE, AgentPhase.DEFAULT_ON):
                # Active/Default: can block
                if result.confidence >= self.config.confidence_threshold:
                    if result.confluence_status == "NON_CONFLUENT":
                        should_block = True
                        human_review_required = self.config.require_human_review
                        logger.error(f"[BLOCKING] Non-confluent TRS rule detected: {result.issues}")

            return {
                "result": result,
                "phase": self.config.phase.value,
                "should_block": should_block,
                "human_review_required": human_review_required,
            }

        except Exception as e:
            logger.error(f"BAML TRS validation failed: {e}")
            return {
                "phase": self.config.phase.value,
                "should_block": False,  # Fail open
                "human_review_required": True,
                "error": str(e),
            }

    async def validate_ontology(
        self, ontology_turtle: str, ontology_context: str = "", shacl_shapes: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Validate an RDF/OWL ontology using AI analysis.

        Returns similar structure to validate_trs_rule.
        """
        if not self.is_available:
            return {
                "phase": self.config.phase.value,
                "should_block": False,
                "human_review_required": False,
                "error": "BAML agent not available",
            }

        try:
            result = await self._baml_client.ValidateOntology(
                ontology_turtle=ontology_turtle,
                ontology_context=ontology_context,
                shacl_shapes=shacl_shapes,
            )

            should_block = False
            human_review_required = False

            if self.config.phase == AgentPhase.EXPERIMENTAL:
                logger.info(
                    f"[EXPERIMENTAL] Ontology validation: "
                    f"consistent={result.is_consistent}, "
                    f"issues={len(result.issues)}, "
                    f"confidence={result.confidence}"
                )

            elif self.config.phase == AgentPhase.ADVISORY:
                if result.confidence >= self.config.confidence_threshold:
                    if not result.is_consistent:
                        logger.warning(
                            f"[ADVISORY] Potential ontology inconsistency: {result.issues}"
                        )

            elif self.config.phase in (AgentPhase.ACTIVE, AgentPhase.DEFAULT_ON):
                if result.confidence >= self.config.confidence_threshold:
                    if not result.is_consistent:
                        should_block = True
                        human_review_required = self.config.require_human_review
                        logger.error(f"[BLOCKING] Inconsistent ontology detected: {result.issues}")

            return {
                "result": result,
                "phase": self.config.phase.value,
                "should_block": should_block,
                "human_review_required": human_review_required,
            }

        except Exception as e:
            logger.error(f"BAML ontology validation failed: {e}")
            return {
                "phase": self.config.phase.value,
                "should_block": False,
                "human_review_required": True,
                "error": str(e),
            }

    async def analyze_stratification(
        self, current_code: str, meta_operations: List[str], self_analysis_depth: int
    ) -> Dict[str, Any]:
        """
        Analyze code for stratification safety (Russell's Paradox prevention).

        Returns similar structure to validate_trs_rule.
        """
        if not self.is_available:
            return {
                "phase": self.config.phase.value,
                "should_block": False,
                "human_review_required": False,
                "error": "BAML agent not available",
            }

        try:
            result = await self._baml_client.AnalyzeStratification(
                current_code=current_code,
                meta_operations=meta_operations,
                self_analysis_depth=self_analysis_depth,
            )

            should_block = False
            human_review_required = False

            if self.config.phase == AgentPhase.EXPERIMENTAL:
                logger.info(
                    f"[EXPERIMENTAL] Stratification analysis: "
                    f"safe={result.safe_to_proceed}, "
                    f"level={result.current_level}/{result.max_safe_level}, "
                    f"self_ref={result.self_reference_detected}"
                )

            elif self.config.phase == AgentPhase.ADVISORY:
                if not result.safe_to_proceed:
                    logger.warning(
                        f"[ADVISORY] Potential stratification violation: {result.explanation}"
                    )

            elif self.config.phase in (AgentPhase.ACTIVE, AgentPhase.DEFAULT_ON):
                if not result.safe_to_proceed:
                    should_block = True
                    human_review_required = self.config.require_human_review
                    logger.error(
                        f"[BLOCKING] Stratification violation detected: "
                        f"{result.universe_violations}"
                    )

            return {
                "result": result,
                "phase": self.config.phase.value,
                "should_block": should_block,
                "human_review_required": human_review_required,
            }

        except Exception as e:
            logger.error(f"BAML stratification analysis failed: {e}")
            return {
                "phase": self.config.phase.value,
                "should_block": False,
                "human_review_required": True,
                "error": str(e),
            }


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# SINGLETON ACCESS
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

_global_agent: Optional[BAMLAgent] = None


def get_agent(config: Optional[AgentConfig] = None) -> BAMLAgent:
    """
    Get or create global BAML agent instance.

    Usage:
        agent = get_agent()
        result = await agent.validate_trs_rule(...)
    """
    global _global_agent

    if _global_agent is None or config is not None:
        _global_agent = BAMLAgent(config)

    return _global_agent


def configure_agent(
    phase: AgentPhase = AgentPhase.DISABLED,
    confidence_threshold: float = 0.7,
    require_human_review: bool = True,
) -> BAMLAgent:
    """
    Configure global BAML agent (convenience function).

    Usage:
        configure_agent(
            phase=AgentPhase.ADVISORY,
            confidence_threshold=0.8
        )
    """
    config = AgentConfig(
        phase=phase,
        confidence_threshold=confidence_threshold,
        require_human_review=require_human_review,
    )
    return get_agent(config)
