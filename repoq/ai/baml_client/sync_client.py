# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__

class BamlSyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def __getstate__(self):
        # Return state needed for pickling
        return {"options": self.__options}

    def __setstate__(self, state):
        # Restore state from pickling
        self.__options = state["options"]
        self.__stream_client = BamlStreamClient(self.__options)
        self.__http_request = BamlHttpRequestClient(self.__options)
        self.__http_stream_request = BamlHttpStreamRequestClient(self.__options)
        self.__llm_response_parser = LlmResponseParser(self.__options)
        self.__llm_stream_parser = LlmStreamParser(self.__options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        tags: typing.Optional[typing.Dict[str, str]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlSyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if tags is not None:
            options["tags"] = tags
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlSyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    def AnalyzeStratification(self, current_code: str,meta_operations: typing.List[str],self_analysis_depth: int,
        baml_options: BamlCallOptions = {},
    ) -> types.StratificationAnalysis:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.AnalyzeStratification(current_code=current_code,meta_operations=meta_operations,self_analysis_depth=self_analysis_depth,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="AnalyzeStratification", args={
                "current_code": current_code,"meta_operations": meta_operations,"self_analysis_depth": self_analysis_depth,
            })
            return typing.cast(types.StratificationAnalysis, result.cast_to(types, types, stream_types, False, __runtime__))
    def CheckCriticalPairs(self, rule1: str,rule2: str,overlap_analysis: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.CriticalPair"]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.CheckCriticalPairs(rule1=rule1,rule2=rule2,overlap_analysis=overlap_analysis,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="CheckCriticalPairs", args={
                "rule1": rule1,"rule2": rule2,"overlap_analysis": overlap_analysis,
            })
            return typing.cast(typing.List["types.CriticalPair"], result.cast_to(types, types, stream_types, False, __runtime__))
    def ReviewPullRequest(self, diff: str,file_paths: typing.List[str],pr_description: str,quality_policy: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ValidationSeverity:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ReviewPullRequest(diff=diff,file_paths=file_paths,pr_description=pr_description,quality_policy=quality_policy,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ReviewPullRequest", args={
                "diff": diff,"file_paths": file_paths,"pr_description": pr_description,"quality_policy": quality_policy,
            })
            return typing.cast(types.ValidationSeverity, result.cast_to(types, types, stream_types, False, __runtime__))
    def ValidateOntology(self, ontology_turtle: str,ontology_context: str,shacl_shapes: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.OntologyValidationResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ValidateOntology(ontology_turtle=ontology_turtle,ontology_context=ontology_context,shacl_shapes=shacl_shapes,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ValidateOntology", args={
                "ontology_turtle": ontology_turtle,"ontology_context": ontology_context,"shacl_shapes": shacl_shapes,
            })
            return typing.cast(types.OntologyValidationResult, result.cast_to(types, types, stream_types, False, __runtime__))
    def ValidateTRSRule(self, rule_lhs: str,rule_rhs: str,existing_rules: typing.List[str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TRSValidationResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ValidateTRSRule(rule_lhs=rule_lhs,rule_rhs=rule_rhs,existing_rules=existing_rules,context=context,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ValidateTRSRule", args={
                "rule_lhs": rule_lhs,"rule_rhs": rule_rhs,"existing_rules": existing_rules,"context": context,
            })
            return typing.cast(types.TRSValidationResult, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeStratification(self, current_code: str,meta_operations: typing.List[str],self_analysis_depth: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.StratificationAnalysis, types.StratificationAnalysis]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="AnalyzeStratification", args={
            "current_code": current_code,"meta_operations": meta_operations,"self_analysis_depth": self_analysis_depth,
        })
        return baml_py.BamlSyncStream[stream_types.StratificationAnalysis, types.StratificationAnalysis](
          result,
          lambda x: typing.cast(stream_types.StratificationAnalysis, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.StratificationAnalysis, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def CheckCriticalPairs(self, rule1: str,rule2: str,overlap_analysis: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[typing.List["stream_types.CriticalPair"], typing.List["types.CriticalPair"]]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="CheckCriticalPairs", args={
            "rule1": rule1,"rule2": rule2,"overlap_analysis": overlap_analysis,
        })
        return baml_py.BamlSyncStream[typing.List["stream_types.CriticalPair"], typing.List["types.CriticalPair"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.CriticalPair"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.CriticalPair"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ReviewPullRequest(self, diff: str,file_paths: typing.List[str],pr_description: str,quality_policy: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[types.ValidationSeverity, types.ValidationSeverity]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ReviewPullRequest", args={
            "diff": diff,"file_paths": file_paths,"pr_description": pr_description,"quality_policy": quality_policy,
        })
        return baml_py.BamlSyncStream[types.ValidationSeverity, types.ValidationSeverity](
          result,
          lambda x: typing.cast(types.ValidationSeverity, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ValidationSeverity, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ValidateOntology(self, ontology_turtle: str,ontology_context: str,shacl_shapes: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.OntologyValidationResult, types.OntologyValidationResult]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ValidateOntology", args={
            "ontology_turtle": ontology_turtle,"ontology_context": ontology_context,"shacl_shapes": shacl_shapes,
        })
        return baml_py.BamlSyncStream[stream_types.OntologyValidationResult, types.OntologyValidationResult](
          result,
          lambda x: typing.cast(stream_types.OntologyValidationResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.OntologyValidationResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ValidateTRSRule(self, rule_lhs: str,rule_rhs: str,existing_rules: typing.List[str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.TRSValidationResult, types.TRSValidationResult]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ValidateTRSRule", args={
            "rule_lhs": rule_lhs,"rule_rhs": rule_rhs,"existing_rules": existing_rules,"context": context,
        })
        return baml_py.BamlSyncStream[stream_types.TRSValidationResult, types.TRSValidationResult](
          result,
          lambda x: typing.cast(stream_types.TRSValidationResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TRSValidationResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeStratification(self, current_code: str,meta_operations: typing.List[str],self_analysis_depth: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AnalyzeStratification", args={
            "current_code": current_code,"meta_operations": meta_operations,"self_analysis_depth": self_analysis_depth,
        }, mode="request")
        return result
    def CheckCriticalPairs(self, rule1: str,rule2: str,overlap_analysis: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="CheckCriticalPairs", args={
            "rule1": rule1,"rule2": rule2,"overlap_analysis": overlap_analysis,
        }, mode="request")
        return result
    def ReviewPullRequest(self, diff: str,file_paths: typing.List[str],pr_description: str,quality_policy: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ReviewPullRequest", args={
            "diff": diff,"file_paths": file_paths,"pr_description": pr_description,"quality_policy": quality_policy,
        }, mode="request")
        return result
    def ValidateOntology(self, ontology_turtle: str,ontology_context: str,shacl_shapes: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ValidateOntology", args={
            "ontology_turtle": ontology_turtle,"ontology_context": ontology_context,"shacl_shapes": shacl_shapes,
        }, mode="request")
        return result
    def ValidateTRSRule(self, rule_lhs: str,rule_rhs: str,existing_rules: typing.List[str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ValidateTRSRule", args={
            "rule_lhs": rule_lhs,"rule_rhs": rule_rhs,"existing_rules": existing_rules,"context": context,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeStratification(self, current_code: str,meta_operations: typing.List[str],self_analysis_depth: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AnalyzeStratification", args={
            "current_code": current_code,"meta_operations": meta_operations,"self_analysis_depth": self_analysis_depth,
        }, mode="stream")
        return result
    def CheckCriticalPairs(self, rule1: str,rule2: str,overlap_analysis: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="CheckCriticalPairs", args={
            "rule1": rule1,"rule2": rule2,"overlap_analysis": overlap_analysis,
        }, mode="stream")
        return result
    def ReviewPullRequest(self, diff: str,file_paths: typing.List[str],pr_description: str,quality_policy: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ReviewPullRequest", args={
            "diff": diff,"file_paths": file_paths,"pr_description": pr_description,"quality_policy": quality_policy,
        }, mode="stream")
        return result
    def ValidateOntology(self, ontology_turtle: str,ontology_context: str,shacl_shapes: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ValidateOntology", args={
            "ontology_turtle": ontology_turtle,"ontology_context": ontology_context,"shacl_shapes": shacl_shapes,
        }, mode="stream")
        return result
    def ValidateTRSRule(self, rule_lhs: str,rule_rhs: str,existing_rules: typing.List[str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ValidateTRSRule", args={
            "rule_lhs": rule_lhs,"rule_rhs": rule_rhs,"existing_rules": existing_rules,"context": context,
        }, mode="stream")
        return result
    

b = BamlSyncClient(DoNotUseDirectlyCallManager({}))