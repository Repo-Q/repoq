# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (3)
# #########################################################################

class ConfluenceStatus(str, Enum):
    CONFLUENT = "CONFLUENT"
    NON_CONFLUENT = "NON_CONFLUENT"
    UNKNOWN = "UNKNOWN"
    LOCALLY_CONFLUENT = "LOCALLY_CONFLUENT"

class TerminationStatus(str, Enum):
    TERMINATING = "TERMINATING"
    NON_TERMINATING = "NON_TERMINATING"
    UNKNOWN = "UNKNOWN"
    POTENTIALLY_DIVERGENT = "POTENTIALLY_DIVERGENT"

class ValidationSeverity(str, Enum):
    ERROR = "ERROR"
    WARNING = "WARNING"
    INFO = "INFO"
    SUGGESTION = "SUGGESTION"

# #########################################################################
# Generated classes (6)
# #########################################################################

class CriticalPair(BaseModel):
    left_term: str
    right_term: str
    common_reduct: typing.Optional[str] = None
    joinable: bool
    explanation: str

class OntologyIssue(BaseModel):
    type: str
    location: str
    description: str
    suggested_fix: typing.Optional[str] = None

class OntologyValidationResult(BaseModel):
    ontology_uri: str
    is_consistent: bool
    issues: typing.List["OntologyIssue"]
    reasoning_chain: typing.List[str]
    suggested_improvements: typing.List[str]
    confidence: float

class StratificationAnalysis(BaseModel):
    current_level: int
    max_safe_level: int
    self_reference_detected: bool
    universe_violations: typing.List[str]
    safe_to_proceed: bool
    explanation: str

class TRSValidationResult(BaseModel):
    rule_id: str
    confluence_status: ConfluenceStatus
    termination_status: TerminationStatus
    critical_pairs: typing.List["CriticalPair"]
    termination_proof: typing.Optional["TerminationProof"] = None
    issues: typing.List[str]
    suggestions: typing.List[str]
    confidence: float

class TerminationProof(BaseModel):
    method: str
    measure: typing.Optional[str] = None
    well_founded: bool
    explanation: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
