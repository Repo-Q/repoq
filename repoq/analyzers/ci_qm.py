"""CI/QM analyzer for parsing test results from JUnit XML reports.

This module extracts test execution results from JUnit-format XML files
commonly generated by CI/CD systems (Maven, Gradle, pytest-junit, etc.).

Test cases and results are mapped to OSLC QM (Quality Management) ontology
for semantic integration.
"""

from __future__ import annotations

import glob
import logging
import os
import xml.etree.ElementTree as ET

from ..core.model import Project, TestCase, TestResult
from .base import Analyzer

logger = logging.getLogger(__name__)

JUNIT_GLOBS = [
    "target/surefire-reports/*.xml",
    "build/test-results/test/*.xml",
    "reports/tests/*.xml",
    "**/junit*.xml",
    "**/TEST-*.xml",
]


class CIQualityAnalyzer(Analyzer):
    """Analyzer for CI/CD test results from JUnit XML reports.

    Searches common paths for JUnit XML files and extracts:
    - Test cases (TestCase entities)
    - Test results (TestResult entities with status: passed/failed/error/skipped)
    - Execution times
    - Failure messages

    Supports standard JUnit XML format used by Maven Surefire, Gradle,
    pytest-junit, and other test runners.
    """

    name = "ci_qm"

    def _parse_junit_xml(self, path: str) -> ET.Element | None:
        """Parse a single JUnit XML file with error handling.
        
        Args:
            path: Absolute path to XML file
            
        Returns:
            Root element if successful, None otherwise
        """
        try:
            tree = ET.parse(path)  # nosec B314
            return tree.getroot()
        except ET.ParseError as e:
            logger.debug(f"Failed to parse JUnit XML {path}: {e}")
            return None
        except OSError as e:
            logger.debug(f"Could not read JUnit XML {path}: {e}")
            return None
        except Exception as e:
            logger.warning(f"Unexpected error parsing {path}: {e}")
            return None
    
    def _process_testcase(self, project: Project, tcase: ET.Element) -> None:
        """Process a single testcase element and create test case/result records.
        
        Args:
            project: Project model to populate
            tcase: XML element for testcase
        """
        name = tcase.get("name") or "test"
        classname = tcase.get("classname")
        tc_id = (
            f"repo:testcase:{classname}.{name}"
            if classname
            else f"repo:testcase:{name}"
        )
        
        # Create test case if not exists
        if tc_id not in project.tests_cases:
            project.tests_cases[tc_id] = TestCase(
                id=tc_id, name=name, classname=classname
            )

        # Parse test result status
        status = "passed"
        message = None
        time_val = None
        
        if tcase.get("time"):
            try:
                time_val = float(tcase.get("time"))
            except Exception:
                time_val = None
        
        # Check for failure/error/skipped nodes
        if tcase.find("failure") is not None:
            status = "failed"
            message = tcase.find("failure").get("message") or "failure"
        elif tcase.find("error") is not None:
            status = "error"
            message = tcase.find("error").get("message") or "error"
        elif tcase.find("skipped") is not None:
            status = "skipped"

        # Create test result
        tr_id = (
            f"{tc_id}#result-{abs(hash((tc_id, status, message, time_val))) % 100000}"
        )
        project.tests_results.append(
            TestResult(
                id=tr_id,
                testcase=tc_id,
                status=status,
                time=time_val,
                message=message,
            )
        )

    def run(self, project: Project, repo_dir: str, cfg) -> None:
        """Parse JUnit XML files and populate test data.

        Args:
            project: Project model to populate with test cases and results
            repo_dir: Absolute path to repository root
            cfg: Configuration (unused)

        Note:
            Populates project.tests_cases and project.tests_results.
            Errors parsing individual XML files are logged but don't stop
            the overall analysis.
        """
        # Search for JUnit XML files
        for pattern in JUNIT_GLOBS:
            for path in glob.glob(os.path.join(repo_dir, pattern), recursive=True):
                root = self._parse_junit_xml(path)
                if root is None:
                    continue
                
                # Process each testcase in the XML
                for tcase in root.iter("testcase"):
                    self._process_testcase(project, tcase)
